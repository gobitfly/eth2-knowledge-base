{
    "swagger": "2.0",
    "info": {
        "description": "To authenticate your API request beaconcha.in uses API Keys. Set your API Key either by:\n- Setting the `Authorization` header in the following format: `Authorization: Bearer \u003cyour-api-key\u003e`. (recommended)\n- Setting the URL query parameter in the following format: `api_key={your_api_key}`.\\\nExample: `https://beaconcha.in/api/v2/example?field=value\u0026api_key={your_api_key}`",
        "title": "beaconcha.in API",
        "contact": {},
        "version": "2.0"
    },
    "basePath": "/api/v2",
    "paths": {
        "/users/me/dashboards": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get all dashboards of the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboards"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_UserDashboardsData"
                        }
                    }
                }
            }
        },
        "/users/me/notifications": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get an overview of your recent notifications.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationsResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/account-dashboards/{dashboard_id}/groups/{group_id}/epochs/{epoch}": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a detailed view of a triggered notification related to an account dashboard group at a specific epoch.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The epoch of the notification.",
                        "name": "epoch",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search for Address, ENS",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationsAccountDashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/clients": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a list of triggered notifications related to your clients.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "client_name",
                            "timestamp"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Client",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationClientsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/dashboards": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a list of triggered notifications related to your dashboards.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "If set, results will be filtered to only include networks given. Provide a comma separated list.",
                        "name": "networks",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "chain_id",
                            "timestamp",
                            "dashboard_id"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Dashboard, Group",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationDashboardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/machines": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a list of triggered notifications related to your machines.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "machine_name",
                            "threshold",
                            "event_type",
                            "timestamp"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Machine",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationMachinesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/networks": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a list of triggered notifications related to networks.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "timestamp",
                            "event_type"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationNetworksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get notification settings for the authenticated user. Excludes dashboard notification settings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationSettingsResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/account-dashboards/{dashboard_id}/groups/{group_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update the notification settings for a specific group of an account dashboard for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notification settings",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutUserNotificationSettingsAccountDashboard.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PutUserNotificationSettingsAccountDashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/clients/{client_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update client notification settings for the authenticated user. When a client is subscribed, notifications will be sent when a new version is available.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the client.",
                        "name": "client_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "`is_subscribed`: Set to `true` to subscribe to notifications; set to `false` to unsubscribe.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutUserNotificationSettingsClient.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PutUserNotificationSettingsClientResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/dashboards": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a list of notification settings for the dashboards of the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Dashboard, Group",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationSettingsDashboardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/general": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update general notification settings for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "description": "Description TODO",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.NotificationSettingsGeneral"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PutUserNotificationSettingsGeneralResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/networks/{network}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update network notification settings for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The networks name or chain ID.",
                        "name": "network",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Description Todo",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutUserNotificationSettingsNetworks.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PutUserNotificationSettingsNetworksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/paired-devices/{paired_device_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update paired device notification settings for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The paired device ID.",
                        "name": "paired_device_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Description TODO",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutUserNotificationSettingsPairedDevices.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PutUserNotificationSettingsPairedDevicesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Delete paired device notification settings for the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The paired device ID.",
                        "name": "paired_device_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/settings/validator-dashboards/{dashboard_id}/groups/{group_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update the notification settings for a specific group of a validator dashboard for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Notification settings",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.NotificationSettingsValidatorDashboard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.PutUserNotificationSettingsValidatorDashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/test-email": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Send a test email notification to the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/me/notifications/test-push": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Send a test push notification to the authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/users/me/notifications/test-webhook": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Send a test webhook notification from the authenticated user to the given URL.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification Settings"
                ],
                "parameters": [
                    {
                        "description": "Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPostUserNotificationsTestWebhook.request"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me/notifications/validator-dashboards/{dashboard_id}/groups/{group_id}/epochs/{epoch}": {
            "get": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Get a detailed view of a triggered notification related to a validator dashboard group at a specific epoch.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The epoch of the notification.",
                        "name": "epoch",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search for Index",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetUserNotificationsValidatorDashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Create a new validator dashboard. **Note**: New dashboards will automatically have a default group created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "description": "`name`: Specify the name of the dashboard.\u003cbr\u003e`network`: Specify the network for the dashboard. Possible options are:\u003cul\u003e\u003cli\u003e`ethereum`\u003c/li\u003e\u003cli\u003e`gnosis`\u003c/li\u003e\u003c/ul\u003e",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPostValidatorDashboards.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPostReturnData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The request could not be performed by the server because the authenticated user has already reached their dashboard limit.",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}": {
            "get": {
                "description": "Get overview information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Delete a specified validator dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Dashboard deleted successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/archiving": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Archive or unarchive a specified validator dashboard. Archived dashboards cannot be accessed by other endpoints. Archiving happens automatically if the number of dashboards, validators, or groups exceeds the limit allowed by your subscription plan. For example, this might occur if you downgrade your subscription to a lower tier.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "`is_archived`: Set to `true` to archive the dashboard, or `false` to unarchive it.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutValidatorDashboardArchiving.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPostArchivingReturnData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The request could not be performed by the server because the authenticated user has already reached their subscription limit.",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/blocks": {
            "get": {
                "description": "Get blocks information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "proposer",
                            "slot",
                            "block",
                            "status",
                            "reward"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Index, Public Key, Group.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardBlocksResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/consensus-layer-deposits": {
            "get": {
                "description": "Get consensus layer deposits information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardConsensusLayerDepositsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/duties/{epoch}": {
            "get": {
                "description": "Get duties information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The epoch to get data for.",
                        "name": "epoch",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "validator",
                            "reward"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Index, Public Key.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardDutiesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/execution-layer-deposits": {
            "get": {
                "description": "Get execution layer deposits information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardExecutionLayerDepositsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/groups": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Create a new group in a specified validator dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPostValidatorDashboardGroups.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPostCreateGroupData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The request could not be performed by the server because the authenticated user has already reached their group limit.",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/groups/{group_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update a groups name in a specified validator dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutValidatorDashboardGroups.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPostCreateGroupData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Delete a group in a specified validator dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Group deleted successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/groups/{group_id}/heatmap/{timestamp}": {
            "get": {
                "description": "Get heatmap information for a specified group in a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The timestamp to get data for.",
                        "name": "timestamp",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "epoch",
                            "hourly",
                            "daily",
                            "weekly"
                        ],
                        "type": "string",
                        "default": "hourly",
                        "description": "Aggregation type to get data for.",
                        "name": "aggregation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardGroupHeatmapResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/groups/{group_id}/rewards/{epoch}": {
            "get": {
                "description": "Get rewards information for a specified group in a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The epoch to get data for.",
                        "name": "epoch",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardGroupRewardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/groups/{group_id}/summary": {
            "get": {
                "description": "Get summary information for a specified group in a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "all_time",
                            "last_30d",
                            "last_7d",
                            "last_24h",
                            "last_1h"
                        ],
                        "type": "string",
                        "description": "Time period to get data for.",
                        "name": "period",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardGroupSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/groups/{group_id}/validators": {
            "delete": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Delete all validators from a specified group in a specified validator dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validators removed successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/heatmap": {
            "get": {
                "description": "Get heatmap information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "epoch",
                            "hourly",
                            "daily",
                            "weekly"
                        ],
                        "type": "string",
                        "default": "hourly",
                        "description": "Aggregation type to get data for.",
                        "name": "aggregation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return data after this timestamp.",
                        "name": "after_ts",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return data before this timestamp.",
                        "name": "before_ts",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardHeatmapResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/name": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update the name of a specified validator dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutValidatorDashboardName.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPostReturnData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/public-ids": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Create a new public ID for a specified dashboard. This can be used as an ID by other users for non-modifying (i.e. GET) endpoints only. Currently limited to one per dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "`name`: Provide a public name for the dashboard\u003cbr\u003e`share_settings`:\u003cul\u003e\u003cli\u003e`share_groups`: If set to `true`, accessing the dashboard through the public ID will not reveal any group information.\u003c/li\u003e\u003c/ul\u003e",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPostValidatorDashboardPublicIds.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPublicId"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict. The request could not be performed by the server because the authenticated user has already reached their public ID limit.",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/public-ids/{public_id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Update a specified public ID for a specified dashboard.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the public ID.",
                        "name": "public_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "`name`: Provide a public name for the dashboard\u003cbr\u003e`share_settings`:\u003cul\u003e\u003cli\u003e`share_groups`: If set to `true`, accessing the dashboard through the public ID will not reveal any group information.\u003c/li\u003e\u003c/ul\u003e",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPutValidatorDashboardPublicId.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-types_VDBPublicId"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Delete a specified public ID for a specified dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The ID of the public ID.",
                        "name": "public_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Public ID deleted successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/rewards": {
            "get": {
                "description": "Get rewards information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "epoch"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Epoch, Index, Public Key, Group.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardRewardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/rewards-chart": {
            "get": {
                "description": "Get rewards chart data for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardRewardsChartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/rocket-pool": {
            "get": {
                "description": "Get an aggregated list of the Rocket Pool nodes details associated with a specified dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "node",
                            "minipools",
                            "collateral",
                            "rpl",
                            "effective_rpl",
                            "rpl_apr",
                            "smoothing_pool"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Node address.",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardRocketPoolResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/rocket-pool/{node_address}/minipools": {
            "get": {
                "description": "Get minipools information for a specified Rocket Pool node associated with a specified dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The address of the node.",
                        "name": "node_address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "group_id"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Index, Node.",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardRocketPoolMinipoolsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/slot-viz": {
            "get": {
                "description": "Get slot viz information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of group IDs to filter the results by. If omitted, all groups will be included.",
                        "name": "group_ids",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardSlotVizResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/summary": {
            "get": {
                "description": "Get summary information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "all_time",
                            "last_30d",
                            "last_7d",
                            "last_24h",
                            "last_1h"
                        ],
                        "type": "string",
                        "description": "Time period to get data for.",
                        "name": "period",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "group_id",
                            "validators",
                            "efficiency",
                            "attestations",
                            "proposals",
                            "reward"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Index, Public Key, Group.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardSummaryResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/summary-chart": {
            "get": {
                "description": "Get summary chart data for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of group IDs to filter the results by.",
                        "name": "group_ids",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all",
                            "attestation",
                            "sync",
                            "proposal"
                        ],
                        "type": "string",
                        "description": "Efficiency type to get data for.",
                        "name": "efficiency_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "epoch",
                            "hourly",
                            "daily",
                            "weekly"
                        ],
                        "type": "string",
                        "default": "hourly",
                        "description": "Aggregation type to get data for.",
                        "name": "aggregation",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return data after this timestamp.",
                        "name": "after_ts",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Return data before this timestamp.",
                        "name": "before_ts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardSummaryChartResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/summary/validators": {
            "get": {
                "description": "Get summary information for validators in a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "none",
                            "sync",
                            "slashed",
                            "proposal"
                        ],
                        "type": "string",
                        "default": "none",
                        "description": "Validator duty to get data for.",
                        "name": "duty",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "all_time",
                            "last_30d",
                            "last_7d",
                            "last_24h",
                            "last_1h"
                        ],
                        "type": "string",
                        "description": "Time period to get data for.",
                        "name": "period",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardSummaryValidatorsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/total-consensus-layer-deposits": {
            "get": {
                "description": "Get total consensus layer deposits information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardTotalConsensusDepositsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/total-execution-layer-deposits": {
            "get": {
                "description": "Get total execution layer deposits information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardTotalExecutionDepositsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/total-rocket-pool": {
            "get": {
                "description": "Get a summary of all Rocket Pool nodes details associated with a specified dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardTotalRocketPoolResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/total-withdrawals": {
            "get": {
                "description": "Get total withdrawals information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardTotalWithdrawalsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/validators": {
            "get": {
                "description": "Get a list of validators in a specified validator dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "The ID of the group.",
                        "name": "group_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "index",
                            "public_key",
                            "balance",
                            "status",
                            "withdrawal_credentials"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Address, ENS.",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardValidatorsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Add new validators to a specified dashboard or update the group of already-added validators. This endpoint will always add as many validators as possible, even if more validators are provided than allowed by the subscription plan. The response will contain a list of added validators.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "`group_id`: (optional) Provide a single group id, to which all validators get added to. If omitted, the default group will be used.\u003cbr\u003e\u003cbr\u003eTo add validators or update their group, only one of the following fields can be set:\u003cul\u003e\u003cli\u003e`validators`: Provide a list of validator indices or public keys.\u003c/li\u003e\u003cli\u003e`deposit_address`: (limited to subscription tiers with 'Bulk adding') Provide a deposit address from which as many validators as possible will be added to the dashboard.\u003c/li\u003e\u003cli\u003e`withdrawal_credential`: (limited to subscription tiers with 'Bulk adding') Provide a withdrawal credential from which as many validators as possible will be added to the dashboard.\u003c/li\u003e\u003cli\u003e`graffiti`: (limited to subscription tiers with 'Bulk adding') Provide a graffiti string from which as many validators as possible will be added to the dashboard.\u003c/li\u003e\u003c/ul\u003e",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPostValidatorDashboardValidators.request"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns a list of added validators.",
                        "schema": {
                            "$ref": "#/definitions/types.ApiDataResponse-array_types_VDBPostValidatorsData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Remove all validators from a specified dashboard.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validators removed successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/validators/bulk-deletions": {
            "post": {
                "security": [
                    {
                        "ApiKeyInHeader": [],
                        "ApiKeyInQuery": []
                    }
                ],
                "description": "Remove specific validators from a specified dashboard in bulk.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard Management"
                ],
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "`validators`: Provide an array of validator indices or public keys that should get removed from the dashboard.",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.PublicPostValidatorDashboardValidatorBulkDeletions.request"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validators removed successfully."
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        },
        "/validator-dashboards/{dashboard_id}/withdrawals": {
            "get": {
                "description": "Get withdrawals information for a specified dashboard",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Validator Dashboard"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "The ID of the dashboard.",
                        "name": "dashboard_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Return data for the given cursor value. Pass the `paging.next_cursor`` value of the previous response to navigate to forward, or pass the `paging.prev_cursor`` value of the previous response to navigate to backward.",
                        "name": "cursor",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The maximum number of results that may be returned.",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "epoch",
                            "slot",
                            "index",
                            "recipient",
                            "amount"
                        ],
                        "type": "string",
                        "description": "The field you want to sort by. Append with `:desc` for descending order.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search for Index, Public Key, Address.",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Provide a comma separated list of protocol modes which should be respected for validator calculations. Possible values are `rocket_pool``.",
                        "name": "modes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.GetValidatorDashboardWithdrawalsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/types.ApiErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.PublicPostUserNotificationsTestWebhook.request": {
            "type": "object",
            "properties": {
                "is_webhook_discord_enabled": {
                    "type": "boolean"
                },
                "webhook_url": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPostValidatorDashboardGroups.request": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPostValidatorDashboardPublicIds.request": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "share_settings": {
                    "type": "object",
                    "properties": {
                        "share_groups": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "handlers.PublicPostValidatorDashboardValidatorBulkDeletions.request": {
            "type": "object",
            "properties": {
                "validators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.intOrString"
                    }
                }
            }
        },
        "handlers.PublicPostValidatorDashboardValidators.request": {
            "type": "object",
            "properties": {
                "deposit_address": {
                    "type": "string"
                },
                "graffiti": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "validators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.intOrString"
                    }
                },
                "withdrawal_credential": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPostValidatorDashboards.request": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "string",
                    "enum": [
                        "ethereum",
                        "gnosis"
                    ]
                }
            }
        },
        "handlers.PublicPutUserNotificationSettingsAccountDashboard.request": {
            "type": "object",
            "properties": {
                "erc20_token_transfers_value_threshold": {
                    "description": "0 does not disable, is_erc20_token_transfers_subscribed determines if it's enabled",
                    "type": "number"
                },
                "is_erc1155_token_transfers_subscribed": {
                    "type": "boolean"
                },
                "is_erc20_token_transfers_subscribed": {
                    "type": "boolean"
                },
                "is_erc721_token_transfers_subscribed": {
                    "type": "boolean"
                },
                "is_ignore_spam_transactions_enabled": {
                    "type": "boolean"
                },
                "is_incoming_transactions_subscribed": {
                    "type": "boolean"
                },
                "is_outgoing_transactions_subscribed": {
                    "type": "boolean"
                },
                "is_webhook_discord_enabled": {
                    "type": "boolean"
                },
                "subscribed_chain_ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.intOrString"
                    }
                },
                "webhook_url": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPutUserNotificationSettingsClient.request": {
            "type": "object",
            "properties": {
                "is_subscribed": {
                    "type": "boolean"
                }
            }
        },
        "handlers.PublicPutUserNotificationSettingsNetworks.request": {
            "type": "object",
            "properties": {
                "gas_above_threshold": {
                    "type": "string"
                },
                "gas_below_threshold": {
                    "type": "string"
                },
                "is_gas_above_subscribed": {
                    "type": "boolean"
                },
                "is_gas_below_subscribed": {
                    "type": "boolean"
                },
                "is_new_reward_round_subscribed": {
                    "type": "boolean"
                },
                "is_participation_rate_subscribed": {
                    "type": "boolean"
                },
                "participation_rate_threshold": {
                    "type": "number"
                }
            }
        },
        "handlers.PublicPutUserNotificationSettingsPairedDevices.request": {
            "type": "object",
            "properties": {
                "is_notifications_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPutValidatorDashboardArchiving.request": {
            "type": "object",
            "properties": {
                "is_archived": {
                    "type": "boolean"
                }
            }
        },
        "handlers.PublicPutValidatorDashboardGroups.request": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPutValidatorDashboardName.request": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "handlers.PublicPutValidatorDashboardPublicId.request": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "share_settings": {
                    "type": "object",
                    "properties": {
                        "share_groups": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "handlers.intOrString": {
            "type": "object"
        },
        "types.AccountDashboard": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.Address": {
            "type": "object",
            "properties": {
                "ens": {
                    "type": "string"
                },
                "hash": {
                    "type": "string"
                },
                "is_contract": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "types.ApiDataResponse-array_types_VDBPostValidatorsData": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBPostValidatorsData"
                    }
                }
            }
        },
        "types.ApiDataResponse-types_UserDashboardsData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.UserDashboardsData"
                }
            }
        },
        "types.ApiDataResponse-types_VDBPostArchivingReturnData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBPostArchivingReturnData"
                }
            }
        },
        "types.ApiDataResponse-types_VDBPostCreateGroupData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBPostCreateGroupData"
                }
            }
        },
        "types.ApiDataResponse-types_VDBPostReturnData": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBPostReturnData"
                }
            }
        },
        "types.ApiDataResponse-types_VDBPublicId": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBPublicId"
                }
            }
        },
        "types.ApiErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "types.ChartData-int-decimal_Decimal": {
            "type": "object",
            "properties": {
                "categories": {
                    "description": "x-axis",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "series": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChartSeries-int-decimal_Decimal"
                    }
                }
            }
        },
        "types.ChartData-int-float64": {
            "type": "object",
            "properties": {
                "categories": {
                    "description": "x-axis",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "series": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ChartSeries-int-float64"
                    }
                }
            }
        },
        "types.ChartHistorySeconds": {
            "type": "object",
            "properties": {
                "daily": {
                    "type": "integer"
                },
                "epoch": {
                    "type": "integer"
                },
                "hourly": {
                    "type": "integer"
                },
                "weekly": {
                    "type": "integer"
                }
            }
        },
        "types.ChartSeries-int-decimal_Decimal": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "y-axis values",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "id": {
                    "description": "id may be a string or an int",
                    "type": "integer"
                },
                "property": {
                    "description": "for stacking bar charts",
                    "type": "string"
                }
            }
        },
        "types.ChartSeries-int-float64": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "y-axis values",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "id": {
                    "description": "id may be a string or an int",
                    "type": "integer"
                },
                "property": {
                    "description": "for stacking bar charts",
                    "type": "string"
                }
            }
        },
        "types.ClElValue-decimal_Decimal": {
            "type": "object",
            "properties": {
                "cl": {
                    "type": "number"
                },
                "el": {
                    "type": "number"
                }
            }
        },
        "types.ClElValue-float64": {
            "type": "object",
            "properties": {
                "cl": {
                    "type": "number"
                },
                "el": {
                    "type": "number"
                }
            }
        },
        "types.GetUserNotificationClientsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationClientsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetUserNotificationDashboardsResponse": {
            "type": "object"
        },
        "types.GetUserNotificationMachinesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationMachinesTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetUserNotificationNetworksResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationNetworksTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetUserNotificationSettingsDashboardsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationSettingsDashboardsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetUserNotificationSettingsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationSettings"
                }
            }
        },
        "types.GetUserNotificationsAccountDashboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationAccountDashboardDetail"
                }
            }
        },
        "types.GetUserNotificationsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationOverviewData"
                }
            }
        },
        "types.GetUserNotificationsValidatorDashboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationValidatorDashboardDetail"
                }
            }
        },
        "types.GetValidatorDashboardBlocksResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBBlocksTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardConsensusLayerDepositsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBConsensusDepositsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardDutiesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBEpochDutiesTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardExecutionLayerDepositsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBExecutionDepositsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardGroupHeatmapResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBHeatmapTooltipData"
                }
            }
        },
        "types.GetValidatorDashboardGroupRewardsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBGroupRewardsData"
                }
            }
        },
        "types.GetValidatorDashboardGroupSummaryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBGroupSummaryData"
                }
            }
        },
        "types.GetValidatorDashboardHeatmapResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBHeatmap"
                }
            }
        },
        "types.GetValidatorDashboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBOverviewData"
                }
            }
        },
        "types.GetValidatorDashboardRewardsChartResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.ChartData-int-decimal_Decimal"
                }
            }
        },
        "types.GetValidatorDashboardRewardsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBRewardsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardRocketPoolMinipoolsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBRocketPoolMinipoolsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardRocketPoolResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBRocketPoolTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardSlotVizResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SlotVizEpoch"
                    }
                }
            }
        },
        "types.GetValidatorDashboardSummaryChartResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.ChartData-int-float64"
                }
            }
        },
        "types.GetValidatorDashboardSummaryResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBSummaryTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardSummaryValidatorsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBSummaryValidatorsData"
                    }
                }
            }
        },
        "types.GetValidatorDashboardTotalConsensusDepositsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBTotalConsensusDepositsData"
                }
            }
        },
        "types.GetValidatorDashboardTotalExecutionDepositsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBTotalExecutionDepositsData"
                }
            }
        },
        "types.GetValidatorDashboardTotalRocketPoolResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBRocketPoolTableRow"
                }
            }
        },
        "types.GetValidatorDashboardTotalWithdrawalsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.VDBTotalWithdrawalsData"
                }
            }
        },
        "types.GetValidatorDashboardValidatorsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBManageValidatorsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.GetValidatorDashboardWithdrawalsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBWithdrawalsTableRow"
                    }
                },
                "paging": {
                    "$ref": "#/definitions/types.Paging"
                }
            }
        },
        "types.IndexBlocks": {
            "type": "object",
            "properties": {
                "blocks": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "index": {
                    "type": "integer"
                }
            }
        },
        "types.IndexEpoch": {
            "type": "object",
            "properties": {
                "epoch": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                }
            }
        },
        "types.IndexSlots": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer"
                },
                "slots": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.Luck": {
            "type": "object",
            "properties": {
                "proposal": {
                    "$ref": "#/definitions/types.LuckItem"
                },
                "sync": {
                    "$ref": "#/definitions/types.LuckItem"
                }
            }
        },
        "types.LuckItem": {
            "type": "object",
            "properties": {
                "average_interval_seconds": {
                    "type": "integer"
                },
                "expected_timestamp": {
                    "type": "integer"
                },
                "percent": {
                    "type": "number"
                }
            }
        },
        "types.NotificationAccountDashboardDetail": {
            "type": "object",
            "properties": {
                "erc1155_token_transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventExecution"
                    }
                },
                "erc20_token_transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventExecution"
                    }
                },
                "erc721_token_transfers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventExecution"
                    }
                },
                "incoming_transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventExecution"
                    }
                },
                "outgoing_transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventExecution"
                    }
                }
            }
        },
        "types.NotificationClientsTableRow": {
            "type": "object",
            "properties": {
                "client_name": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "types.NotificationEventExecution": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/types.Address"
                },
                "amount": {
                    "type": "number"
                },
                "token_name": {
                    "description": "this field will prob change depending on how execution stuff is implemented",
                    "type": "string"
                },
                "transaction_hash": {
                    "type": "string"
                }
            }
        },
        "types.NotificationEventValidatorBackOnline": {
            "type": "object",
            "properties": {
                "epoch_count": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                }
            }
        },
        "types.NotificationEventWithdrawal": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/types.Address"
                },
                "amount": {
                    "type": "number"
                },
                "index": {
                    "type": "integer"
                }
            }
        },
        "types.NotificationMachinesTableRow": {
            "type": "object",
            "properties": {
                "event_type": {
                    "type": "string"
                },
                "machine_name": {
                    "type": "string"
                },
                "threshold": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.NotificationNetwork": {
            "type": "object",
            "properties": {
                "chain_id": {
                    "type": "integer"
                },
                "settings": {
                    "$ref": "#/definitions/types.NotificationSettingsNetwork"
                }
            }
        },
        "types.NotificationNetworksTableRow": {
            "type": "object",
            "properties": {
                "chain_id": {
                    "type": "integer"
                },
                "event_type": {
                    "type": "string"
                },
                "threshold": {
                    "description": "participation rate threshold should also be passed as decimal string",
                    "type": "number"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.NotificationOverviewData": {
            "type": "object",
            "properties": {
                "adb_most_notified_groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "adb_subscriptions_count": {
                    "type": "integer"
                },
                "clients_subscription_count": {
                    "type": "integer"
                },
                "is_email_notifications_enabled": {
                    "type": "boolean"
                },
                "is_push_notifications_enabled": {
                    "type": "boolean"
                },
                "last_24h_email_count": {
                    "description": "daily limit should be available in user info",
                    "type": "integer"
                },
                "last_24h_push_count": {
                    "type": "integer"
                },
                "last_24h_webhook_count": {
                    "type": "integer"
                },
                "machines_subscription_count": {
                    "type": "integer"
                },
                "networks_subscription_count": {
                    "type": "integer"
                },
                "next_email_count_reset_timestamp": {
                    "type": "integer"
                },
                "vdb_most_notified_groups": {
                    "description": "these will list 3 group names",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vdb_subscriptions_count": {
                    "description": "counts are shown in their respective tables",
                    "type": "integer"
                }
            }
        },
        "types.NotificationPairedDevice": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_notifications_enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "paired_timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.NotificationSettings": {
            "type": "object",
            "properties": {
                "clients": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationSettingsClient"
                    }
                },
                "general_settings": {
                    "$ref": "#/definitions/types.NotificationSettingsGeneral"
                },
                "has_machines": {
                    "type": "boolean"
                },
                "networks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationNetwork"
                    }
                },
                "paired_devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationPairedDevice"
                    }
                }
            }
        },
        "types.NotificationSettingsAccountDashboard": {
            "type": "object",
            "properties": {
                "erc20_token_transfers_value_threshold": {
                    "type": "number"
                },
                "is_erc1155_token_transfers_subscribed": {
                    "type": "boolean"
                },
                "is_erc20_token_transfers_subscribed": {
                    "type": "boolean"
                },
                "is_erc721_token_transfers_subscribed": {
                    "type": "boolean"
                },
                "is_ignore_spam_transactions_enabled": {
                    "type": "boolean"
                },
                "is_incoming_transactions_subscribed": {
                    "type": "boolean"
                },
                "is_outgoing_transactions_subscribed": {
                    "type": "boolean"
                },
                "is_webhook_discord_enabled": {
                    "type": "boolean"
                },
                "subscribed_chain_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "webhook_url": {
                    "type": "string"
                }
            }
        },
        "types.NotificationSettingsClient": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_subscribed": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.NotificationSettingsDashboardsTableRow": {
            "type": "object",
            "properties": {
                "chain_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "dashboard_id": {
                    "type": "integer"
                },
                "dashboard_name": {
                    "type": "string"
                },
                "group_id": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "is_account_dashboard": {
                    "description": "if false it's a validator dashboard",
                    "type": "boolean"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "settings": {
                    "description": "if it's a validator dashboard, Settings is NotificationSettingsAccountDashboard, otherwise NotificationSettingsValidatorDashboard"
                }
            }
        },
        "types.NotificationSettingsGeneral": {
            "type": "object",
            "properties": {
                "do_not_disturb_timestamp": {
                    "description": "notifications are disabled until this timestamp",
                    "type": "integer"
                },
                "is_email_notifications_enabled": {
                    "type": "boolean"
                },
                "is_machine_cpu_usage_subscribed": {
                    "type": "boolean"
                },
                "is_machine_memory_usage_subscribed": {
                    "type": "boolean"
                },
                "is_machine_offline_subscribed": {
                    "type": "boolean"
                },
                "is_machine_storage_usage_subscribed": {
                    "type": "boolean"
                },
                "is_push_notifications_enabled": {
                    "type": "boolean"
                },
                "is_webhook_notifications_enabled": {
                    "type": "boolean"
                },
                "machine_cpu_usage_threshold": {
                    "type": "number"
                },
                "machine_memory_usage_threshold": {
                    "type": "number"
                },
                "machine_storage_usage_threshold": {
                    "type": "number"
                }
            }
        },
        "types.NotificationSettingsNetwork": {
            "type": "object",
            "properties": {
                "gas_above_threshold": {
                    "type": "number"
                },
                "gas_below_threshold": {
                    "type": "number"
                },
                "is_gas_above_subscribed": {
                    "type": "boolean"
                },
                "is_gas_below_subscribed": {
                    "type": "boolean"
                },
                "is_new_reward_round_subscribed": {
                    "type": "boolean"
                },
                "is_participation_rate_subscribed": {
                    "type": "boolean"
                },
                "participation_rate_threshold": {
                    "type": "number"
                }
            }
        },
        "types.NotificationSettingsValidatorDashboard": {
            "type": "object",
            "properties": {
                "group_efficiency_below_threshold": {
                    "type": "number"
                },
                "is_attestations_missed_subscribed": {
                    "type": "boolean"
                },
                "is_block_proposal_missed_subscribed": {
                    "type": "boolean"
                },
                "is_block_proposal_success_subscribed": {
                    "type": "boolean"
                },
                "is_group_efficiency_below_subscribed": {
                    "type": "boolean"
                },
                "is_max_collateral_subscribed": {
                    "type": "boolean"
                },
                "is_min_collateral_subscribed": {
                    "type": "boolean"
                },
                "is_slashed_subscribed": {
                    "type": "boolean"
                },
                "is_sync_subscribed": {
                    "type": "boolean"
                },
                "is_upcoming_block_proposal_subscribed": {
                    "type": "boolean"
                },
                "is_validator_offline_subscribed": {
                    "type": "boolean"
                },
                "is_webhook_discord_enabled": {
                    "type": "boolean"
                },
                "is_withdrawal_processed_subscribed": {
                    "type": "boolean"
                },
                "max_collateral_threshold": {
                    "type": "number"
                },
                "min_collateral_threshold": {
                    "type": "number"
                },
                "webhook_url": {
                    "type": "string"
                }
            }
        },
        "types.NotificationValidatorDashboardDetail": {
            "type": "object",
            "properties": {
                "attestation_missed": {
                    "description": "index (epoch)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.IndexEpoch"
                    }
                },
                "dashboard_name": {
                    "type": "string"
                },
                "group_efficiency_below": {
                    "description": "fill with the `group_efficiency_below` threshold if event is present",
                    "type": "number"
                },
                "group_name": {
                    "type": "string"
                },
                "max_collateral": {
                    "description": "node addresses",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Address"
                    }
                },
                "min_collateral": {
                    "description": "node addresses",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Address"
                    }
                },
                "proposal_missed": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.IndexSlots"
                    }
                },
                "proposal_success": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.IndexBlocks"
                    }
                },
                "proposal_upcoming": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.IndexSlots"
                    }
                },
                "slashed": {
                    "description": "validator indices",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sync": {
                    "description": "validator indices",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "validator_offline": {
                    "description": "validator indices",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "validator_offline_reminder": {
                    "description": "validator indices; TODO not filled yet",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "validator_online": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventValidatorBackOnline"
                    }
                },
                "withdrawal": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.NotificationEventWithdrawal"
                    }
                }
            }
        },
        "types.Paging": {
            "type": "object",
            "properties": {
                "next_cursor": {
                    "type": "string"
                },
                "prev_cursor": {
                    "type": "string"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "types.PercentageDetails-decimal_Decimal": {
            "type": "object",
            "properties": {
                "max_value": {
                    "type": "number"
                },
                "min_value": {
                    "type": "number"
                },
                "percentage": {
                    "type": "number"
                }
            }
        },
        "types.PeriodicValues-float64": {
            "type": "object",
            "properties": {
                "all_time": {
                    "type": "number"
                },
                "last_24h": {
                    "type": "number"
                },
                "last_30d": {
                    "type": "number"
                },
                "last_7d": {
                    "type": "number"
                }
            }
        },
        "types.PeriodicValues-types_ClElValue-decimal_Decimal": {
            "type": "object",
            "properties": {
                "all_time": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "last_24h": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "last_30d": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "last_7d": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                }
            }
        },
        "types.PeriodicValues-types_ClElValue-float64": {
            "type": "object",
            "properties": {
                "all_time": {
                    "$ref": "#/definitions/types.ClElValue-float64"
                },
                "last_24h": {
                    "$ref": "#/definitions/types.ClElValue-float64"
                },
                "last_30d": {
                    "$ref": "#/definitions/types.ClElValue-float64"
                },
                "last_7d": {
                    "$ref": "#/definitions/types.ClElValue-float64"
                }
            }
        },
        "types.PutUserNotificationSettingsAccountDashboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationSettingsAccountDashboard"
                }
            }
        },
        "types.PutUserNotificationSettingsClientResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationSettingsClient"
                }
            }
        },
        "types.PutUserNotificationSettingsGeneralResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationSettingsGeneral"
                }
            }
        },
        "types.PutUserNotificationSettingsNetworksResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationNetwork"
                }
            }
        },
        "types.PutUserNotificationSettingsPairedDevicesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationPairedDevice"
                }
            }
        },
        "types.PutUserNotificationSettingsValidatorDashboardResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/types.NotificationSettingsValidatorDashboard"
                }
            }
        },
        "types.SlotVizEpoch": {
            "type": "object",
            "properties": {
                "epoch": {
                    "type": "integer"
                },
                "progress": {
                    "description": "only on landing page",
                    "type": "number"
                },
                "slots": {
                    "description": "only on dashboard page",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBSlotVizSlot"
                    }
                },
                "state": {
                    "description": "all on landing page, only 'head' on dashboard page",
                    "type": "string"
                }
            }
        },
        "types.StatusCount": {
            "type": "object",
            "properties": {
                "failed": {
                    "type": "integer"
                },
                "success": {
                    "type": "integer"
                }
            }
        },
        "types.UserDashboardsData": {
            "type": "object",
            "properties": {
                "account_dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.AccountDashboard"
                    }
                },
                "validator_dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.ValidatorDashboard"
                    }
                }
            }
        },
        "types.VDBBlocksTableRow": {
            "type": "object",
            "properties": {
                "proposer": {
                    "type": "integer",
                    "x-order": "1"
                },
                "group_id": {
                    "type": "integer",
                    "x-order": "2"
                },
                "epoch": {
                    "type": "integer",
                    "x-order": "3"
                },
                "slot": {
                    "type": "integer",
                    "x-order": "4"
                },
                "block": {
                    "type": "integer",
                    "x-order": "5"
                },
                "graffiti": {
                    "type": "string"
                },
                "reward": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "reward_recipient": {
                    "$ref": "#/definitions/types.Address"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.VDBConsensusDepositsTableRow": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "epoch": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "public_key": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "slot": {
                    "type": "integer"
                },
                "withdrawal_credential": {
                    "type": "string"
                }
            }
        },
        "types.VDBEpochDutiesTableRow": {
            "type": "object",
            "properties": {
                "validator": {
                    "type": "integer",
                    "x-order": "1"
                },
                "duties": {
                    "$ref": "#/definitions/types.ValidatorHistoryDuties"
                }
            }
        },
        "types.VDBExecutionDepositsTableRow": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "block": {
                    "type": "integer"
                },
                "depositor": {
                    "$ref": "#/definitions/types.Address"
                },
                "from": {
                    "$ref": "#/definitions/types.Address"
                },
                "group_id": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "public_key": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "tx_hash": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                },
                "withdrawal_credential": {
                    "type": "string"
                }
            }
        },
        "types.VDBGroupRewardsData": {
            "type": "object",
            "properties": {
                "attestations_head": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                },
                "attestations_source": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                },
                "attestations_target": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                },
                "inactivity": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                },
                "proposal": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                },
                "proposal_cl_att_inc_reward": {
                    "type": "number"
                },
                "proposal_cl_slashing_inc_reward": {
                    "type": "number"
                },
                "proposal_cl_sync_inc_reward": {
                    "type": "number"
                },
                "proposal_el_reward": {
                    "type": "number"
                },
                "slashing": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                },
                "sync": {
                    "$ref": "#/definitions/types.VDBGroupRewardsDetails"
                }
            }
        },
        "types.VDBGroupRewardsDetails": {
            "type": "object",
            "properties": {
                "income": {
                    "type": "number"
                },
                "status_count": {
                    "$ref": "#/definitions/types.StatusCount"
                }
            }
        },
        "types.VDBGroupSummaryColumnItem": {
            "type": "object",
            "properties": {
                "status_count": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "validator_count": {
                    "description": "number of distinct validators",
                    "type": "integer"
                },
                "validators": {
                    "description": "fill with up to 3 validator indexes",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.VDBGroupSummaryData": {
            "type": "object",
            "properties": {
                "apr": {
                    "$ref": "#/definitions/types.ClElValue-float64"
                },
                "attestation_avg_incl_dist": {
                    "type": "number"
                },
                "attestation_efficiency": {
                    "type": "number"
                },
                "attestations_head": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "attestations_source": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "attestations_target": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "balances": {
                    "$ref": "#/definitions/types.ValidatorBalances"
                },
                "efficiency": {
                    "type": "number"
                },
                "luck": {
                    "$ref": "#/definitions/types.Luck"
                },
                "missed_rewards": {
                    "$ref": "#/definitions/types.VDBGroupSummaryMissedRewards"
                },
                "proposal_validator_count": {
                    "description": "number of distinct validators",
                    "type": "integer"
                },
                "proposal_validators": {
                    "description": "fill with up to 3 validator indexes",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "rewards": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "rocket_pool": {
                    "type": "object",
                    "properties": {
                        "collateral": {
                            "type": "number"
                        },
                        "minipools": {
                            "type": "integer"
                        }
                    }
                },
                "slashings": {
                    "description": "Failed slashings are count of validators in the group that were slashed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.VDBGroupSummaryColumnItem"
                        }
                    ]
                },
                "sync": {
                    "$ref": "#/definitions/types.VDBGroupSummaryColumnItem"
                },
                "sync_count": {
                    "$ref": "#/definitions/types.VDBGroupSummarySyncCount"
                }
            }
        },
        "types.VDBGroupSummaryMissedRewards": {
            "type": "object",
            "properties": {
                "attestations": {
                    "type": "number"
                },
                "proposer_rewards": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "sync": {
                    "type": "number"
                }
            }
        },
        "types.VDBGroupSummarySyncCount": {
            "type": "object",
            "properties": {
                "current_validators": {
                    "type": "integer"
                },
                "past_periods": {
                    "type": "integer"
                },
                "upcoming_validators": {
                    "type": "integer"
                }
            }
        },
        "types.VDBHeatmap": {
            "type": "object",
            "properties": {
                "timestamps": {
                    "description": "X-Axis Categories (unix timestamp)",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "x-order": "1"
                },
                "group_ids": {
                    "description": "Y-Axis Categories",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "x-order": "2"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBHeatmapCell"
                    },
                    "x-order": "3"
                },
                "aggregation": {
                    "type": "string"
                }
            }
        },
        "types.VDBHeatmapCell": {
            "type": "object",
            "properties": {
                "x": {
                    "description": "Timestamp",
                    "type": "integer",
                    "x-order": "1"
                },
                "y": {
                    "description": "Group ID",
                    "type": "integer",
                    "x-order": "2"
                },
                "value": {
                    "description": "Attestaton Rewards",
                    "type": "number",
                    "x-order": "3"
                },
                "events": {
                    "$ref": "#/definitions/types.VDBHeatmapEvents"
                }
            }
        },
        "types.VDBHeatmapEvents": {
            "type": "object",
            "properties": {
                "proposal": {
                    "type": "boolean"
                },
                "slash": {
                    "type": "boolean"
                },
                "sync": {
                    "type": "boolean"
                }
            }
        },
        "types.VDBHeatmapTooltipData": {
            "type": "object",
            "properties": {
                "timestamp": {
                    "type": "integer",
                    "x-order": "1"
                },
                "attestation_efficiency": {
                    "type": "number"
                },
                "attestation_income": {
                    "type": "number"
                },
                "attestations_head": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "attestations_source": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "attestations_target": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "proposers": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "slashings": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "syncs": {
                    "type": "integer"
                }
            }
        },
        "types.VDBManageValidatorsTableRow": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "group_id": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "public_key": {
                    "type": "string"
                },
                "queue_position": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "withdrawal_credential": {
                    "type": "string"
                }
            }
        },
        "types.VDBOverviewData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "x-order": "1"
                },
                "apr": {
                    "$ref": "#/definitions/types.PeriodicValues-types_ClElValue-float64"
                },
                "balances": {
                    "$ref": "#/definitions/types.ValidatorBalances"
                },
                "chart_history_seconds": {
                    "$ref": "#/definitions/types.ChartHistorySeconds"
                },
                "efficiency": {
                    "$ref": "#/definitions/types.PeriodicValues-float64"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBOverviewGroup"
                    }
                },
                "network": {
                    "type": "integer"
                },
                "rewards": {
                    "$ref": "#/definitions/types.PeriodicValues-types_ClElValue-decimal_Decimal"
                },
                "validators": {
                    "$ref": "#/definitions/types.ValidatorStateCounts"
                }
            }
        },
        "types.VDBOverviewGroup": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.VDBPostArchivingReturnData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_archived": {
                    "type": "boolean"
                }
            }
        },
        "types.VDBPostCreateGroupData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.VDBPostReturnData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "network": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "types.VDBPostValidatorsData": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                }
            }
        },
        "types.VDBPublicId": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "public_id": {
                    "type": "string"
                },
                "share_settings": {
                    "type": "object",
                    "properties": {
                        "share_groups": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "types.VDBRewardsTableDuty": {
            "type": "object",
            "properties": {
                "attestation": {
                    "type": "number"
                },
                "proposal": {
                    "type": "number"
                },
                "slashing": {
                    "type": "integer"
                },
                "sync": {
                    "type": "number"
                }
            }
        },
        "types.VDBRewardsTableRow": {
            "type": "object",
            "properties": {
                "duty": {
                    "$ref": "#/definitions/types.VDBRewardsTableDuty"
                },
                "epoch": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "integer"
                },
                "reward": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                }
            }
        },
        "types.VDBRocketPoolMinipoolsTableRow": {
            "type": "object",
            "properties": {
                "commission": {
                    "type": "number"
                },
                "created_timestamp": {
                    "type": "integer"
                },
                "deposit": {
                    "type": "number"
                },
                "group_id": {
                    "type": "integer"
                },
                "minipool_status": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#/definitions/types.Address"
                },
                "penalties": {
                    "type": "integer"
                },
                "validator_index": {
                    "type": "integer"
                },
                "validator_status": {
                    "type": "string"
                }
            }
        },
        "types.VDBRocketPoolTableRow": {
            "type": "object",
            "properties": {
                "node": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Address"
                        }
                    ],
                    "x-order": "1"
                },
                "avg_commission": {
                    "type": "number"
                },
                "collateral": {
                    "$ref": "#/definitions/types.PercentageDetails-decimal_Decimal"
                },
                "deposit_credit": {
                    "type": "number"
                },
                "effective_rpl": {
                    "type": "number"
                },
                "minipools_count_leb_16": {
                    "type": "integer"
                },
                "minipools_count_leb_8": {
                    "type": "integer"
                },
                "minipools_count_total": {
                    "type": "integer"
                },
                "node_deposit_balance": {
                    "type": "number"
                },
                "refund_balance": {
                    "type": "number"
                },
                "rpl_apr": {
                    "type": "number"
                },
                "rpl_apr_update_ts": {
                    "type": "integer"
                },
                "rpl_claimed": {
                    "type": "number"
                },
                "rpl_estimate": {
                    "type": "number"
                },
                "rpl_unclaimed": {
                    "type": "number"
                },
                "smoothingpool_claimed": {
                    "type": "number"
                },
                "smoothingpool_opt_in": {
                    "type": "boolean"
                },
                "smoothingpool_unclaimed": {
                    "type": "number"
                },
                "staked_eth": {
                    "type": "number"
                },
                "staked_rpl": {
                    "type": "number"
                },
                "timezone": {
                    "type": "string"
                },
                "user_deposit_balance": {
                    "type": "number"
                }
            }
        },
        "types.VDBSlotVizDuty": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer"
                },
                "validators": {
                    "description": "up to 6 validators that performed the duty, only for scheduled and failed",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.VDBSlotVizSlashing": {
            "type": "object",
            "properties": {
                "slashings": {
                    "description": "up to 6 slashings, validator is always the slashing validator",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBSlotVizTuple"
                    }
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "types.VDBSlotVizSlot": {
            "type": "object",
            "properties": {
                "attestations": {
                    "$ref": "#/definitions/types.VDBSlotVizStatus-types_VDBSlotVizDuty"
                },
                "proposal": {
                    "$ref": "#/definitions/types.VDBSlotVizTuple"
                },
                "slashing": {
                    "$ref": "#/definitions/types.VDBSlotVizStatus-types_VDBSlotVizSlashing"
                },
                "slot": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "sync": {
                    "$ref": "#/definitions/types.VDBSlotVizStatus-types_VDBSlotVizDuty"
                }
            }
        },
        "types.VDBSlotVizStatus-types_VDBSlotVizDuty": {
            "type": "object",
            "properties": {
                "failed": {
                    "$ref": "#/definitions/types.VDBSlotVizDuty"
                },
                "scheduled": {
                    "$ref": "#/definitions/types.VDBSlotVizDuty"
                },
                "success": {
                    "$ref": "#/definitions/types.VDBSlotVizDuty"
                }
            }
        },
        "types.VDBSlotVizStatus-types_VDBSlotVizSlashing": {
            "type": "object",
            "properties": {
                "failed": {
                    "$ref": "#/definitions/types.VDBSlotVizSlashing"
                },
                "scheduled": {
                    "$ref": "#/definitions/types.VDBSlotVizSlashing"
                },
                "success": {
                    "$ref": "#/definitions/types.VDBSlotVizSlashing"
                }
            }
        },
        "types.VDBSlotVizTuple": {
            "type": "object",
            "properties": {
                "duty_object": {
                    "description": "If the duty is a proposal \u0026 it's successful, the duty_object is the proposed block\nIf the duty is a proposal \u0026 it failed/scheduled, the duty_object is the slot\nIf the duty is a slashing \u0026 it's successful, the duty_object is the validator you slashed\nIf the duty is a slashing \u0026 it failed, the duty_object is your validator that was slashed",
                    "type": "integer"
                },
                "validator": {
                    "type": "integer"
                }
            }
        },
        "types.VDBSummaryStatus": {
            "type": "object",
            "properties": {
                "current_sync_count": {
                    "type": "integer"
                },
                "next_sync_count": {
                    "type": "integer"
                },
                "slashed_count": {
                    "type": "integer"
                }
            }
        },
        "types.VDBSummaryTableRow": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer",
                    "x-order": "1"
                },
                "attestations": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "average_network_efficiency": {
                    "type": "number"
                },
                "efficiency": {
                    "type": "number"
                },
                "proposals": {
                    "$ref": "#/definitions/types.StatusCount"
                },
                "reward": {
                    "$ref": "#/definitions/types.ClElValue-decimal_Decimal"
                },
                "status": {
                    "$ref": "#/definitions/types.VDBSummaryStatus"
                },
                "validators": {
                    "$ref": "#/definitions/types.VDBSummaryValidators"
                }
            }
        },
        "types.VDBSummaryValidator": {
            "type": "object",
            "properties": {
                "index": {
                    "type": "integer",
                    "x-order": "1"
                },
                "duty_objects": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.VDBSummaryValidators": {
            "type": "object",
            "properties": {
                "exited": {
                    "type": "integer"
                },
                "offline": {
                    "type": "integer"
                },
                "online": {
                    "type": "integer"
                }
            }
        },
        "types.VDBSummaryValidatorsData": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "validators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBSummaryValidator"
                    }
                }
            }
        },
        "types.VDBTotalConsensusDepositsData": {
            "type": "object",
            "properties": {
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "types.VDBTotalExecutionDepositsData": {
            "type": "object",
            "properties": {
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "types.VDBTotalWithdrawalsData": {
            "type": "object",
            "properties": {
                "total_amount": {
                    "type": "number"
                }
            }
        },
        "types.VDBWithdrawalsTableRow": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "epoch": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "is_missing_estimate": {
                    "type": "boolean"
                },
                "recipient": {
                    "$ref": "#/definitions/types.Address"
                },
                "slot": {
                    "type": "integer"
                }
            }
        },
        "types.ValidatorBalances": {
            "type": "object",
            "properties": {
                "effective": {
                    "type": "number"
                },
                "staked_eth": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            }
        },
        "types.ValidatorDashboard": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "x-order": "1"
                },
                "name": {
                    "type": "string",
                    "x-order": "2"
                },
                "network": {
                    "type": "integer",
                    "x-order": "3"
                },
                "public_ids": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VDBPublicId"
                    },
                    "x-order": "4"
                },
                "is_archived": {
                    "type": "boolean",
                    "x-order": "5"
                },
                "archived_reason": {
                    "type": "string",
                    "x-order": "6"
                },
                "validator_count": {
                    "type": "integer",
                    "x-order": "7"
                },
                "group_count": {
                    "type": "integer",
                    "x-order": "8"
                }
            }
        },
        "types.ValidatorHistoryDuties": {
            "type": "object",
            "properties": {
                "attestation_head": {
                    "$ref": "#/definitions/types.ValidatorHistoryEvent"
                },
                "attestation_source": {
                    "$ref": "#/definitions/types.ValidatorHistoryEvent"
                },
                "attestation_target": {
                    "$ref": "#/definitions/types.ValidatorHistoryEvent"
                },
                "proposal": {
                    "$ref": "#/definitions/types.ValidatorHistoryProposal"
                },
                "slashing": {
                    "$ref": "#/definitions/types.ValidatorHistoryEvent"
                },
                "sync": {
                    "$ref": "#/definitions/types.ValidatorHistoryEvent"
                },
                "sync_count": {
                    "description": "count of successful sync duties for the epoch",
                    "type": "integer"
                }
            }
        },
        "types.ValidatorHistoryEvent": {
            "type": "object",
            "properties": {
                "income": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.ValidatorHistoryProposal": {
            "type": "object",
            "properties": {
                "cl_attestation_inclusion_income": {
                    "type": "number"
                },
                "cl_slashing_inclusion_income": {
                    "type": "number"
                },
                "cl_sync_inclusion_income": {
                    "type": "number"
                },
                "el_income": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "types.ValidatorStateCounts": {
            "type": "object",
            "properties": {
                "exited": {
                    "type": "integer"
                },
                "offline": {
                    "type": "integer"
                },
                "online": {
                    "type": "integer"
                },
                "pending": {
                    "type": "integer"
                },
                "slashed": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyInHeader": {
            "description": "Use your API key as a Bearer token, e.g. `Bearer \u003cyour-api-key\u003e`",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "ApiKeyInQuery": {
            "type": "apiKey",
            "name": "api_key",
            "in": "query"
        }
    }
}